on_game_start = {
	events = {
	}
}

on_single_player_save_game_load = {
	events = {
	}
}

on_custom_diplomacy = {
	events = {
		graygoo.505
	}
}

# Triggers when ground combat starts
# This = planet
# From = country attacking
on_ground_combat_started = {
	events = {
		# Tempest Incoming trait effect
	}
}

#An army has been killed in ground combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
on_army_killed_in_combat = {
	events = {
		rg_skill.8		# Tempest Incoming trait effect
	}
}

on_game_start_country = {
	events = {
		# rg_cluster.8
		rg_event.1
		rg_origin.1
		rg_event.19
	}
}

# This = country
# 最高优先级检测才放月检
on_monthly_pulse_country = {
	events = {
		rg_event.8		#领袖等级检测更新
		rg_event.16		#陆军压制舰更新
		# rg_event.22 #小灰复活检测
		# rg_event.23 #月检移除L星门认知防止收容失效
		# rg_skill.9
		rg_planet.5025	# Virtual Machine pop creation
		rg_planet.5030	# Virtual Machine pop destruction
	}
}

on_yearly_pulse_country = {
	events = {
		rg_event.17
		rg_event.20
		rg_story.20
	}
}

on_mid_game_pulse_country = {
	events = {
		# rg_event.18
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {
		rg_planet.5053 #Nanite ascension - orbital deposit handler
	}
}

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		rg_event.16
		# rg_skill.9
	}
}

# Triggers country_event for the attacker upon defeat
# This = country, attack leader
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_lose = {
	events = {
		rg_event.16
		# rg_skill.9
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
		rg_event.23
	}
}


# on_entering_battle = {
# 	events = {
# 		rg_skill.1
# 	}
# }
# 
# on_space_battle_won = {
# 	events = {
# 		rg_skill.2
# 	}
# }
# this = country

#舰船建造完成
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		rg_skill.3		#科研舰在无主权星系中被建造出来
	}
}

#进入星系
# Scope = Ship
# From = System
# FromFrom = Country
on_entering_system = {
	events = {
		rg_skill.3
	}
}

#舰船完成星系探测
# Scope = ship
# From = system
on_system_survey_ship = {
	events = {
		rg_skill.3
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		rg_skill.11
		rg_story.10
		rg_story.22
		rg_skill.12
		rg_skill.13
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		rg_skill.14
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# Fires when a combat is finished from a lack of enemies
on_space_battle_over = {
	events = {
	}
}

# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_lost = {
	events = {
		rg_skill.15
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		rg_planet.2026	# Virtual Machine pop creation
		rg_planet.2031	# Virtual Machine pop destruction
	}
}

#A building construction has been completed.
# This = Planet
on_building_complete = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
on_building_upgraded = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A building construction has demolished.
# This = Planet
on_building_demolished = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}
# A building repair has finished
# This = Planet
on_building_repaired = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

#A district construction has been completed.
# This = Planet
on_district_complete = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A building construction has finished, replacing another building.
# This = Planet
on_building_replaced = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A building construction has been downgraded and replaced.
# This = Planet
on_building_downgraded = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A district construction has demolished.
# This = Planet
on_district_demolished = {
	events = {
		rg_planet.2026 # Virtual Machine pop creation
		rg_planet.2031 # Virtual Machine pop destruction
	}
}

# A pop has finished purging
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_purged = {
	events = {
		rg_event.24 # Necrophage Purge
	}
}