#Country event_target:gray_owner
#灰风舰船刷新位置检测
rg_global_gray_location_check = {
	if = {
		limit = {
			RG_gray_scientist_active_trigger = yes
		}
		if = {
			limit = {
				exists = event_target:global_gray_constship
			}
			event_target:global_gray_constship = {
				save_global_event_target_as = global_gray_location
			}
		}
		else = {
			random_owned_fleet = {
				limit = {
					has_fleet_flag = gray_constship
				}
				save_global_event_target_as = global_gray_location
			}
		}
	}
	else_if = {
		limit = {
			RG_gray_warship_active_trigger = yes
		}
		if = {
			limit = {
				exists = event_target:gray_warship
			}
			event_target:gray_warship = {
				save_global_event_target_as = global_gray_location
			}
		}
		else = {
			random_owned_fleet = {
				limit = {
					has_fleet_flag = gray_fleet
				}
				save_global_event_target_as = global_gray_location
			}
		}
	}
	else_if = {
		limit = {
			has_country_flag = gray_juggernaut_active
		}
		if = {
			limit = {
				exists = event_target:gray_juggernaut
			}
			event_target:gray_juggernaut = {
				save_global_event_target_as = global_gray_location
			}
		}
		else = {
			random_controlled_fleet = {
				limit = {
					has_fleet_flag = gray_juggernaut_fleet
				}
				save_global_event_target_as = global_gray_location
			}
		}
	}
	else_if = {
		limit = {
			RG_gray_official_active_trigger = yes
		}
		if = {
			limit = {
				any_owned_planet = {
					exists = leader
					leader = {
						is_same_value = event_target:gray_official
					}
				}
			}
			random_owned_planet = {
				limit = {
					exists = leader
					leader = {
						is_same_value = event_target:gray_official
					}
				}
				save_event_target_as = global_gray_location
			}
		}
		else = {
			capital_scope = {
				save_event_target_as = global_gray_location
			}
		}
	}
	else_if = {
		limit = {
			RG_gray_army_active_trigger = yes
		}
		if = {
			limit = {
				any_owned_army = {
					army_type = gray_army
					exists = planet
				}
			}
			random_owned_army = {
				limit = {
					army_type = gray_army
				}
				planet = {
					save_global_event_target_as = global_gray_location
				}
			}
		}
		else = {
			random_owned_army = {
				limit = {
					army_type = gray_army
				}
				fleet = {
					save_global_event_target_as = global_gray_location
				}
			}
		}
	}
	else_if = {
		limit = {
			RG_gray_harbitat_active_trigger = yes
		}
		if = {
			limit = {
				exists = event_target:rg_gray_habitat_target
			}
			event_target:rg_gray_habitat_target = {
				save_global_event_target_as = global_gray_location
			}
		}
	}
	else = {
		capital_scope = {
			save_global_event_target_as = global_gray_location
		}
	}
}

#Country event_target:gray_owner
#存储当前领袖等级
rg_save_gray_leader_level_effect = {
	every_owned_leader = {
		if = {
			###等级检测
			limit = {
				has_leader_flag = rg_gray_leader
				NOT = {
					has_leader_flag = rg_gray_leader_temp
				}
			}
			#导出等级到暂存
			export_trigger_value_to_variable = {
				trigger = has_base_skill
				variable = rg_gray_level_temp
			}
			#导入变量
			owner = {
				set_variable = {
					which = rg_gray_level
					value = prev.rg_gray_level_temp
				}
			}
			#清理暂存区
			clear_variable = rg_gray_level_temp
		}
	}
}

#Country event_target:gray_owner
#把所有种类的小灰领袖都送回娘家
rg_sent_gray_back_to_home_effect = {
	every_owned_leader = {
		limit = {
			has_leader_flag = rg_gray_leader
		}
		set_owner = event_target:rg_gray_country
		set_leader_flag = rg_gray_leader_temp
		# kill_leader = { show_notification = no }
	}
}

#Country event_target:gray_owner
#小灰领袖标识清理
rg_clear_gray_active_flag_effect = {
	remove_country_flag = gray_warship_active
	remove_country_flag = gray_constship_active
	remove_country_flag = gray_army_active
	remove_country_flag = gray_official_active
	remove_country_flag = gray_governor_active	#旧版flag
}

#Country event_target:gray_owner
#小灰总督启用标识
rg_set_gray_official_active_effect = {
	set_country_flag = gray_official_active	#新版flag
	set_country_flag = gray_governor_active	#旧版flag
}

#Country event_target:gray_owner
#小灰战舰启用标识
rg_set_gray_warship_active_effect = {
	set_country_flag = gray_warship_active
}

#Country event_target:gray_owner
#小灰科学家启用标识
rg_set_gray_scientist_active_effect = {
	set_country_flag = gray_official_active	#新版flag
	set_country_flag = gray_governor_active	#旧版flag
}

#Country event_target:gray_owner
#小灰陆军启用标识
rg_set_gray_army_active_effect = {
	set_country_flag = gray_army_active
}

#Country event_target:gray_owner
#小灰科学家启用标识
rg_set_gray_scientist_active_effect = {
	set_country_flag = gray_constship_active
}

#Country event_target:gray_owner
#小灰纳米空间站启用标识
rg_set_gray_harbitat_active_effect = {
	set_country_flag = rg_habitat_enabled
}

#Country event_target:gray_owner
#删除小灰科学家
rg_clear_gray_science_ship_effect = {
	every_owned_fleet = {
		limit = {
			has_fleet_flag = gray_constship
		}
		delete_fleet = {
			target = this
			kill_leader = no
			destroy_template = yes
		}
	}
}

#Country event_target:gray_owner
#删除小灰陆军
rg_clear_gray_army_effect = {
	every_owned_army = {
		limit = {
			army_type = gray_army
		}
		if = {
			limit = {
				exists = leader
			}
			unassign_leader = leader
		}
		remove_army = yes
	}
}

#Country event_target:gray_owner
#删除小灰战舰
rg_clear_gray_warship_effect = {
	every_owned_fleet = {
		limit = {
			has_fleet_flag = gray_fleet
		}
		delete_fleet = {
			target = this
			kill_leader = no
			destroy_template = yes
		}
	}
}

#Country event_target:gray_owner
#删除小灰纳米空间站
rg_clear_harbitat = {
	remove_country_flag = rg_habitat_enabled
	event_target:rg_gray_habitat_target = {
		remove_planet = yes
	}
}

#Country event_target:gray_owner
#等级导入，把存储的领袖等级赋予到领袖身上
rg_set_varible_as_leader_level_effect = {
	random_owned_leader = {
		limit = {
			has_leader_flag = rg_gray_leader
		}
		set_skill = owner.rg_gray_level
	}
}

#Country event_target:gray_owner
#创造灰风总督
rg_create_gray_governor = {
	if = {
		limit = {
			RG_gray_official_active_trigger = yes
		}
	}
	else = {
		#延迟执行
		optimize_memory
		#删除战舰
		every_owned_fleet = {
			limit = {
				has_fleet_flag = gray_fleet
			}
			delete_fleet = {
				target = this
				kill_leader = no
				destroy_template = yes
			}
		}
		#删除科学舰
		every_owned_fleet = {
			limit = {
				has_fleet_flag = gray_constship
			}
			delete_fleet = {
				target = this
				kill_leader = no
				destroy_template = yes
			}
		}
		#删除陆军
		every_owned_army = {
			limit = {
				army_type = gray_army
			}
			if = {
				limit = {
					exists = leader
				}
				unassign_leader = leader
			}
			remove_army = yes
		}
		#存储当前领袖等级
		rg_save_gray_leader_level_effect = yes
		#把所有种类的小灰领袖都送回娘家
		rg_sent_gray_back_to_home_effect = yes
		#把娘家的总督领袖接回来
		if = {
			limit = {
				exists = event_target:gray_governor
			}
			event_target:gray_governor = {
				set_owner = event_target:gray_owner
				remove_leader_flag = rg_gray_leader_temp
			}
		}
		#如果不存在总督备份，现场变一个
		else = {
			rg_gray_govener_init = yes
		}
		#更新灰风形态
		rg_clear_gray_active_flag_effect = yes
		#设置总督已启用标识
		rg_set_gray_official_active_effect = yes
		#等级导入，把存储的领袖等级赋予到领袖身上
		rg_set_varible_as_leader_level_effect = yes
	}
}

#Country event_target:gray_owner
#创造灰风战舰
rg_create_gray_warship = {
	if = {
		limit = {
			RG_gray_warship_active_trigger = yes
		}
	}
	else = {
		optimize_memory
		#舰船刷新位置检测
		rg_global_gray_location_check = yes
		#存储当前领袖等级
		rg_save_gray_leader_level_effect = yes
		#把所有种类的小灰领袖都送回娘家
		rg_sent_gray_back_to_home_effect = yes
		#把娘家的指挥官领袖接回来
		if = {
			limit = {
				exists = event_target:gray_leader_admiral
			}
			event_target:gray_leader_admiral = {
				set_owner = event_target:gray_owner
				remove_leader_flag = rg_gray_leader_temp
			}
		}
		else = {
			rg_gray_commander_init = yes
		}
		if = {
			limit = {
				has_country_flag = rg_gray_level_2
			}
			rg_warship_init_mod1 = yes
		}
		else_if = {
			limit = {
				has_country_flag = rg_gray_level_3
				NOT = {
					has_country_flag = gray_warship_is_juggernaut
				}
			}
			rg_warship_init_mod2 = yes
		}
		else_if = {
			limit = {
				has_country_flag = gray_warship_is_juggernaut
			}
			rg_warship_init_mod3 = yes
		}
		else = {
			rg_warship_init_mod0 = yes
		}
		#删除科学舰
		rg_clear_gray_science_ship_effect = yes
		#删除陆军
		rg_clear_gray_army_effect = yes
		#更新灰风形态
		rg_clear_gray_active_flag_effect = yes
		#设置战舰已启用标识
		rg_set_gray_warship_active_effect = yes
		#导入变量到等级
		rg_set_varible_as_leader_level_effect = yes
	}
}

#Country event_target:gray_owner
#创造灰风地面单位
rg_create_gray_army = {
	if = {
		limit = {
			RG_gray_army_active_trigger = yes
		}
	}
	else = {
		optimize_memory
		#舰船刷新位置检测
		rg_global_gray_location_check = yes
		#存储当前领袖等级
		rg_save_gray_leader_level_effect = yes
		#把所有种类的小灰领袖都送回娘家
		rg_sent_gray_back_to_home_effect = yes
		#把娘家的指挥官领袖接回来
		if = {
			limit = {
				exists = event_target:gray_leader_general
			}
			event_target:gray_leader_general = {
				set_owner = event_target:gray_owner
				remove_leader_flag = rg_gray_leader_temp
			}
		}
		else = {
			rg_gray_commander_init = yes
		}
		rg_army_transport_ship_init = yes
		rg_clear_gray_warship_effect = yes
		rg_clear_gray_science_ship_effect = yes
		rg_clear_gray_active_flag_effect = yes
		rg_set_gray_army_active_effect = yes
		rg_set_varible_as_leader_level_effect = yes
	}
}

#Country event_target:gray_owner
#创造灰风科学舰
rg_create_gray_const = {
	if = {
		limit = {
			RG_gray_scientist_active_trigger = yes
		}
	}
	else = {
		optimize_memory
		#舰船刷新位置检测
		rg_global_gray_location_check = yes
		#存储当前领袖等级
		rg_save_gray_leader_level_effect = yes
		#把所有种类的小灰领袖都送回娘家
		rg_sent_gray_back_to_home_effect = yes
		#把娘家的科学家领袖接回来
		if = {
			limit = {
				exists = event_target:gray_leader_scientist
			}
			event_target:gray_leader_scientist = {
				set_owner = event_target:gray_owner
				remove_leader_flag = rg_gray_leader_temp
			}
		}
		else = {
			rg_gray_scientist_init = yes
		}
		rg_scientist_ship_init = yes
		rg_clear_gray_warship_effect = yes
		rg_clear_gray_army_effect = yes
		rg_clear_gray_active_flag_effect = yes
		rg_set_gray_scientist_active_effect = yes
		rg_set_varible_as_leader_level_effect = yes
	}
}

#Country event_target:gray_owner
#计算纳米空间站行星规模 基本10+（小灰领袖等级rg_gray_level*2）
rg_harbitar_size_calculate = {
	set_variable = {
		which = rg_habitat_size
		value = 10
	}
	set_variable = {
		which = rg_habitat_size_temp
		value = rg_gray_level
	}
	multiply_variable = {
		which = rg_habitat_size_temp
		value = 2
	}
	change_variable = {
		which = rg_habitat_size_temp
		value = 10
	}
	set_variable = {
		which = rg_habitat_size
		value = rg_habitat_size_temp
	}
}

#Country event_target:gray_owner
#创造灰风纳米空间站
rg_juggernaut_habitat_init = {
	if = {
		limit = {
			RG_gray_harbitat_active_trigger = yes
		}
	}
	else = {
		optimize_memory
		rg_global_gray_location_check = yes
		rg_harbitar_size_calculate = yes
		event_target:global_gray_location = {
			solar_system = {
				spawn_planet = {
					class = pc_rg_grayhabitat
					location = event_target:global_gray_location
					orbit_location = yes
					orbit_angle = 225
					orbit_distance = 360
					orbit_angle_offset = 45
					orbit_distance_offset = 9.899
					size = 10
					has_ring = no
					init_effect = {
						prevent_anomaly = yes
						set_planet_entity = {
							entity = "grey_tempesttw_orbital_habitat_entity"
						}
						set_surveyed = {
							surveyed = yes
							surveyor = FROM
						}
						set_all_comms_surveyed = yes
						clear_blockers = yes
						set_owner = root
						set_controller = root
						create_colony = {
							owner = root
							species = owner_main_species
							ethos = owner
						}
						if = {
							limit = {
								NOT = {
									exists = event_target:rg_owner_main_maid_species
								}
							}
							every_owned_pop_group = {
								rg_event_effect_planet2027_spawn_maid_species = yes
							}
						}
						set_name = "NAME_rg_gray_habitat_base"
						if = {
							limit = {
								event_target:gray_owner = {
									RG_gray_official_active_trigger = yes
								}
							}
							assign_leader = event_target:gray_governor
						}
						set_planet_size = owner.rg_habitat_size
						generate_start_buildings_and_districts = yes
						while = {
							count = 1
							add_district = district_rg_generator
						}
						while = {
							count = 1
							add_district = district_rg_mining
						}
						while = {
							count = 1
							add_district = district_rg_farming
						}
						while = {
							count = 1
							add_district = district_rg_industrial
						}
						if = {
							limit = {
								exists = owner
								owner = {
									is_hive_empire = yes
								}
							}
							while = {
								count = 1
								add_district = district_rg_hive
							}
						}
						if = {
							limit = {
								exists = owner
								owner = {
									is_regular_empire = yes
								}
							}
							while = {
								count = 1
								add_district = district_rg_city
							}
						}
						if = {
							limit = {
								exists = owner
								from = {
									is_machine_empire = yes
								}
							}
							while = {
								count = 1
								add_district = district_rg_nexus
							}
						}
						create_pop_group = {
							species = owner_main_species
							size = 5
						}
						set_planet_flag = megastructure
						set_planet_flag = habitat
						set_planet_flag = advanced_habitat
						set_planet_flag = advanced_habitat_2
						set_planet_flag = rg_gray_habitat
						save_global_event_target_as = rg_gray_habitat_target
					}
				}
			}
		}
		rg_set_gray_harbitat_active_effect = yes
	}
}
