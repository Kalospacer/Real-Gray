# example_class = {
#	name = <name_key>
# 	name_plural = <name_plural_key>
# 	description = <description_key>
#
#	#all the following default to no
#	can_lead_army = yes/no			# Applies skill_<class_id>_army scaled by level to armies
#	can_lead_navy = yes/no			# Applies skill_<class_id>_navy scaled by level to fleets
#	can_govern_planet = yes/no		# Applies skill_<class_id>_planet_governor scaled by level to governed planet
									# Applies skill_<class_id>_sector_governor scaled by level to governed sector, if governing the sector capital
									# Applies skill_<class_id>_background_planet_governor scaled by level togoverned planet, if governing their homeworld
#	can_be_envoy = yes/no
# 	can_research_tech = yes/no
# 	can_research_special_projects = yes/no
# 	can_crew_science_ship = yes/no
# 	can_research_anomalies = yes/no
# 	can_research_archaeology_site = yes/no
# 	can_survey = yes/no
# 	can_boost_cloaking_detection = yes/no
# 	can_explore_rifts = yes/no
# 	can_conduct_active_reconnaissance = yes/no
# 	can_govern_planet = yes/no
# 	can_have_traits = yes/no	# defaults to yes, if no this class will not gain LEADER_ASSIGNED_MONTHLY_EXPERIENCE when assigned
#	can_rule_empire = yes/no	# defaults to yes
#	recruitable = yes/no		# defaults to yes
# 	max_trait_points = <num>
#	leader_capacity = <num>		# maximum number of leader of this type before you get maluses, 0 means no cap
#	replaces_old_class = "old_class"	# used for backwards compatibility. When "old_class" appears in an old save, it is converted to this class at loading
#										# can appear multiple times
#
# 	resources = { #upkeep
# 		category = leader_scientists/etc
# 		cost = {
# 			...
# 		}
# 	}
#
# 	ai_weight = {			# used to determine which type of leader the AI prefers (frex: commanders for warlike leaders, and governor for pacifists)
# 		base = <num>
#		modifier = {}
# 	}
#
#	ai_location_weight = {	# used to evaluate a specific leader for an assignment to a specific location (right now only used for fleet),
#							# scope is the leader, from is the leader location (can be a planet, a fleet, an army etc)
#							# if the score is 0 or less, the leader will not be assigned to that location
#		base = <num>
#		modifier = {}
#	}
#
# 	minimum_ai_target = <num>
#
# 	leader_background_job_weight = {
# 		job_name = <weight>
# 		# etc
# 	}
# }
#
# icon = 1 # 1-based index in the icon file. might be replaced by an icon name later
#
# paragon_background_selector = <name of an asset_selector>, used to display a background behind paragon portraits
#
#
# How the AI assigns leaders now:
#
# Step 1: Sort all possible location using the NDefines::NAI::LOCATION_WEIGHT_* values (all of them are multipliers except the galactic community which is a flat value)
# Step 2: Sort all available leaders by skill
# Step 3: for each leader in order, calculate a location weight based on the ai_location_weight of their class
# Step 4: Assign the highest leader/location pair based on the weight
# Step 5: if no leader was assigned, see if hiring a leader is possible repeating the same steps

rg_nanite_leader = {
	name = rg_nanite_leader
	name_plural = rg_nanite_leader_plural
	description = rg_nanite_leader_description

	can_lead_army = yes
	can_lead_navy = yes
	can_govern_planet = yes
	can_be_envoy = yes
	can_research_tech = yes
	can_research_special_projects = yes
	can_crew_science_ship = yes
	can_research_anomalies = yes
	can_research_archaeology_site = yes
	can_survey = yes
	can_boost_cloaking_detection = yes
	can_explore_rifts = yes
	can_conduct_active_reconnaissance = yes
	can_govern_planet = yes
	can_have_traits = yes
	can_rule_empire = yes
	recruitable = no
	max_trait_points = 3
	leader_capacity = 3

	ai_weight = {
		modifier = {
			factor = 0
		}
	}
	icon = 4
	paragon_background_selector = "paragon_background_selector"
}